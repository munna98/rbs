generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  username     String   @unique
  passwordHash String   @map("password_hash")
  role         Role
  createdAt    DateTime @default(now()) @map("created_at")
  orders       Order[]

  @@map("users")
}

enum Role {
  ADMIN
  CASHIER
  WAITER
}

model Category {
  id          String     @id @default(uuid())
  name        String     @unique
  description String?
  menuItems   MenuItem[]

  @@map("categories")
}

model MenuItem {
  id         String      @id @default(uuid())
  categoryId String      @map("category_id")
  name       String
  code       String      @unique  // NEW: Quick search code
  price      Float
  image      String?
  available  Boolean     @default(true)
  category   Category    @relation(fields: [categoryId], references: [id])
  orderItems OrderItem[]

  @@map("menu_items")
}

model Table {
  id          String      @id @default(uuid())
  tableNumber Int         @unique @map("table_number")
  capacity    Int
  status      TableStatus @default(AVAILABLE)
  orders      Order[]

  @@map("tables")
}

enum TableStatus {
  AVAILABLE
  OCCUPIED
  RESERVED
}

model Order {
  id           String       @id @default(uuid())
  orderNumber  String       @unique @map("order_number")
  kotNumber    String?      @unique @map("kot_number") // NEW: Kitchen Order Ticket number
  kotPrinted   Boolean      @default(false) @map("kot_printed") // NEW
  kotPrintedAt DateTime?    @map("kot_printed_at") // NEW
  tableId      String?      @map("table_id")
  userId       String       @map("user_id")
  orderType    OrderType    @default(DINE_IN) @map("order_type")
  customerName String?      @map("customer_name")
  customerPhone String?     @map("customer_phone")
  customerAddress String?   @map("customer_address")
  status       OrderStatus  @default(PENDING)
  total        Float
  discount     Float        @default(0)
  notes        String?
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")
  table        Table?       @relation(fields: [tableId], references: [id])
  user         User         @relation(fields: [userId], references: [id])
  orderItems   OrderItem[]
  payments     Payment[]

  @@map("orders")
}

enum OrderType {
  DINE_IN
  TAKEAWAY
  DELIVERY
}

enum OrderStatus {
  PENDING
  PREPARING
  READY      // NEW: For takeaway/delivery
  SERVED
  COMPLETED
  CANCELLED
}

model OrderItem {
  id         String   @id @default(uuid())
  orderId    String   @map("order_id")
  menuItemId String   @map("menu_item_id")
  quantity   Int
  price      Float
  prepared   Boolean  @default(false)
  notes      String?  // NEW: Item-specific notes (e.g., "no onions")
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])

  @@map("order_items")
}

model Payment {
  id            String        @id @default(uuid())
  orderId       String        @map("order_id")
  amount        Float
  method        PaymentMethod
  transactionId String?       @map("transaction_id")
  splitNumber   Int?          @default(1) @map("split_number") // NEW: For split payments
  createdAt     DateTime      @default(now()) @map("created_at")
  order         Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("payments")
}

enum PaymentMethod {
  CASH
  CARD
  UPI
  SPLIT  // NEW: For split payments
}

model Inventory {
  id           String   @id @default(uuid())
  itemName     String   @map("item_name")
  quantity     Float
  unit         String
  minThreshold Float    @map("min_threshold")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("inventory")
}

model RestaurantSettings {
  id         String  @id @default(uuid())
  name       String  @default("My Restaurant")
  address    String?
  phone      String?
  email      String?
  taxRate    Float   @default(5) @map("tax_rate")
  currency   String  @default("INR")
  gstNumber  String? @map("gst_number")

  @@map("restaurant_settings")
}

model PrinterSettings {
  id                String  @id @default(uuid())
  printerName       String  @map("printer_name")
  kitchenPrinterName String? @map("kitchen_printer_name") // NEW
  paperWidth        Int     @default(80) @map("paper_width")
  copies            Int     @default(1)
  kotCopies         Int     @default(1) @map("kot_copies") // NEW
  enableSound       Boolean @default(false) @map("enable_sound")
  autoOpenDrawer    Boolean @default(true) @map("auto_open_drawer")

  @@map("printer_settings")
}

model OrderWorkflowSettings {
  id                          String   @id @default(uuid())
  
  // Workflow Mode
  orderWorkflowMode           String   @default("FULL_SERVICE") // FULL_SERVICE, QUICK_SERVICE, CUSTOM
  
  // Order Creation
  requirePaymentAtOrder       Boolean  @default(false)
  autoMarkServedWhenPaid      Boolean  @default(false)
  
  // KOT Settings
  autoPrintKOT                Boolean  @default(true)
  requireKOTPrintConfirmation Boolean  @default(false)
  kotPrintDelay               Int      @default(0) // in seconds
  
  // Kitchen Display
  autoStartPreparing          Boolean  @default(false)
  enableItemWisePreparing     Boolean  @default(true)
  
  // Payment Settings
  allowPartialPayment         Boolean  @default(true)
  allowSplitPayment           Boolean  @default(true)
  requirePaymentForServed     Boolean  @default(false)
  
  // Table Management
  autoOccupyTableOnOrder      Boolean  @default(true)
  autoFreeTableOnPayment      Boolean  @default(true)
  allowMultipleOrdersPerTable Boolean  @default(false)
  
  // Order Status Flow
  orderStatusFlow             String   @default("PENDING_PREPARING_SERVED_COMPLETED")
  
  // Notifications
  notifyKitchenOnNewOrder     Boolean  @default(true)
  notifyWaiterOnReady         Boolean  @default(true)
  playOrderSound              Boolean  @default(true)
  
  updatedAt                   DateTime @updatedAt @map("updated_at")

  @@map("order_workflow_settings")
}